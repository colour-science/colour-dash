[tool.poetry]
name = "colour-dash"
version = "0.2.4"
description = "Various colour science Dash apps built on top of Colour"
license = "BSD-3-Clause"
authors = [ "Colour Developers <colour-developers@colour-science.org>" ]
maintainers = [ "Colour Developers <colour-developers@colour-science.org>" ]
readme = 'README.rst'
repository = "https://github.com/colour-science/colour-dash"
homepage = "https://www.colour-science.org/"
keywords = [
    "color",
    "color-science",
    "color-space",
    "color-spaces",
    "colorspace",
    "colorspaces",
    "colour",
    "colour-science",
    "colour-space",
    "colour-spaces",
    "colourspace",
    "colourspaces",
    "dash",
    "docker",
    "python"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development"
]

[tool.poetry.dependencies]
python = ">= 3.9, < 3.12"
colour-science = ">= 0.4.2"
imageio = ">= 2, < 3"
numpy = ">= 1.21, < 2"
scipy = ">= 1.7, < 2"
dash = "*"
dash-renderer = "*"
gunicorn = "*"
plotly = "*"

black = { version = "*", optional = true }  # Development dependency.
blackdoc = { version = "*", optional = true }  # Development dependency.
coverage = { version = "!= 6.3", optional = true }  # Development dependency.
coveralls = { version = "*", optional = true }  # Development dependency.
flynt = { version = "*", optional = true }  # Development dependency.
invoke = { version = "*", optional = true }  # Development dependency.
pre-commit = { version = "*", optional = true }  # Development dependency.
pyright = { version = "*", optional = true }  # Development dependency.
pytest = { version = "*", optional = true }  # Development dependency.
pytest-cov = { version = "*", optional = true }  # Development dependency.
pytest-xdist = { version = "*", optional = true }  # Development dependency.
ruff = { version = "*", optional = true }  # Development dependency.

[tool.poetry.dev-dependencies]
black = "*"
blackdoc = "*"
coverage = "*"
coveralls = "*"
flynt = "*"
invoke = "*"
pre-commit = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
ruff = "*"

[tool.poetry.extras]
development = [
    "black",
    "blackdoc",
    "coverage",
    "coveralls",
    "flynt",
    "invoke",
    "mypy",
    "pre-commit",
    "pyright",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
]

[tool.black]
line-length = 79
exclude = '''
/(
    \.git
  | build
  | dist
)/
'''

[tool.flynt]
line_length=999

[tool.pyright]
reportMissingImports = false
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnnecessaryTypeIgnoreComment = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "A",      # flake8-builtins
    "ARG",    # flake8-unused-arguments
    # "ANN",  # flake8-annotations
    "B",      # flake8-bugbear
    # "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    # "C90",  # mccabe
    # "COM",  # flake8-commas
    "DTZ",    # flake8-datetimez
    "D",      # pydocstyle
    "E",      # pydocstyle
    # "ERA",  # eradicate
    # "EM",   # flake8-errmsg
    "EXE",    # flake8-executable
    "F",      # flake8
    # "FBT",  # flake8-boolean-trap
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420
    "ISC",    # flake8-implicit-str-concat
    "N",      # pep8-naming
    # "PD",   # pandas-vet
    "PIE",    # flake8-pie
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    # "PT",   # flake8-pytest-style
    # "PTH",  # flake8-use-pathlib          [Enable]
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RUF",    # Ruff
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    # "TCH",  # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pydocstyle
    "YTT"     # flake8-2020
]
ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "I001",
    "N801",
    "N802",
    "N803",
    "N806",
    "N813",
    "N815",
    "N816",
    "PIE804",
    "PLE0605",
    "PLR0913",
    "PLR2004",
    "RET504",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "TRY003",
    "TRY300",
]
typing-modules = ["colour.hints"]
fixable = ["B", "C", "E", "F", "PIE", "RUF", "SIM", "UP", "W"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"docs/*" = ["INP"]
"app.py" = ["INP"]
"index.py" = ["INP"]
"setup.py" = ["INP"]
"tasks.py" = ["INP"]

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"
